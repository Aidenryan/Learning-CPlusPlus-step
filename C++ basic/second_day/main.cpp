#include <iostream>

using namespace std;

//默认参数，如果函数使用时候不传参数，则按照默认来，否则按照传参来
//多个参数情况下，默认参数一定要从右往左。
int fun1(int a, int b, int c = 100)
{
    return 0;
}

//占位参数，没有什么实质作用
void fun2( int a, int)
{

}

/* *********************************************************************************************************/
//函数类型：函数的返回值，函数形参列表（参数的个数，参数类型，参数顺序）
//函数重载：函数名相同，函数列表不同。和函数返回值没关系，函数返回值并不是构成函数重载的条件
/*
 * 重载规则
 * 1.面数名相同。
 * 2.参数个数不同,参数的类型不同,参数顺序不同,均可构成重载。
 * 3.返回值类型不同则不可以构成重载。
 * */
void fun3( int a, int b)
{

}

void fun3(int a, char c)
{

}
//如果要是函数重载话，不要写默认参数，为了避免调用出现函数冲突
void fun3(int a, int b, int c = 100)
{

}

/*
1如果能够严格匹配调用完全匹配的
2如果没有完全匹配，调用隐式转换 char->int ;  float->double
3都匹配不到，调用失败。
*/
/* *********************************************************************************************************/

//函数指针
int fun4(int a, int b)
{

}
//1.定义一种函数类型
typedef int( my_fun )(int, int);

//2.定义一种指向这种函数类型的指针
typedef int(* my_fun_p)(int, int);
int main()
{
    //1.
    my_fun *fp = NULL;
    fp = fun4;
    fp(10,20);

    //2
    my_fun_p fpp = NULL;
    fpp = fun4;
    fpp(10,20);

    //3、直接定义
    int(*fppp)(int ,int) = NULL;
    fppp = fun4;
    fppp(10,20);

    std::cout << "Hello, World!" << std::endl;
    return 0;
}